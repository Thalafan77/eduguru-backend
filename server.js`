const express = require("express");
const cors = require("cors");
const multer = require("multer");
const { google } = require("googleapis");
const stream = require("stream");
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const app = express();
const upload = multer({ storage: multer.memoryStorage() });

app.use(cors());
app.use(express.json());

// --- Environment variables ---
const SERVICE_ACCOUNT = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_JSON);
const CHATGPT_KEY = process.env.OPENAI_API_KEY;
const PARENT_FOLDER_ID = process.env.PARENT_FOLDER_ID;

// --- Google Drive setup ---
const auth = new google.auth.GoogleAuth({
  credentials: SERVICE_ACCOUNT,
  scopes: ["https://www.googleapis.com/auth/drive.file"],
});
const drive = google.drive({ version: "v3", auth });

// --- Upload endpoint ---
app.post("/upload", upload.single("file"), async (req, res) => {
  try {
    const file = req.file;
    const { month, day, subject } = req.body;

    if (!file || !month || !day || !subject) {
      return res.status(400).json({ error: "Missing required fields" });
    }

    // Create folder structure: month/Day X/subject
    const path = [month, `Day ${day}`, subject];
    let parentId = PARENT_FOLDER_ID;

    for (let folderName of path) {
      const response = await drive.files.list({
        q: `'${parentId}' in parents and name='${folderName}' and mimeType='application/vnd.google-apps.folder' and trashed=false`,
        fields: "files(id, name)"
      });

      if (response.data.files.length > 0) {
        parentId = response.data.files[0].id;
      } else {
        const folder = await drive.files.create({
          resource: {
            name: folderName,
            mimeType: "application/vnd.google-apps.folder",
            parents: [parentId]
          },
          fields: "id"
        });
        parentId = folder.data.id;
      }
    }

    // Upload file
    const bufferStream = new stream.PassThrough();
    bufferStream.end(file.buffer);

    const fileMetadata = { name: file.originalname, parents: [parentId] };
    const media = { mimeType: file.mimetype, body: bufferStream };

    const uploadedFile = await drive.files.create({
      resource: fileMetadata,
      media: media,
      fields: "id, name"
    });

    res.json({ success: true, fileName: uploadedFile.data.name, fileId: uploadedFile.data.id });

  } catch (error) {
    console.error("Upload error:", error);
    res.status(500).json({ error: error.message });
  }
});

// --- Chat endpoint ---
app.post("/chat", async (req, res) => {
  try {
    const { message } = req.body;
    if (!message) return res.status(400).json({ error: "Message is required" });

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": "Bearer " + CHATGPT_KEY,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: message }],
        max_tokens: 200
      })
    });

    const data = await response.json();
    const aiResponse = data.choices?.[0]?.message?.content || "No response";

    res.json({ response: aiResponse });

  } catch (error) {
    console.error("Chat error:", error);
    res.status(500).json({ error: error.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
